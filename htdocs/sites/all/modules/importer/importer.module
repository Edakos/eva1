<?php
/**
 * @file The importer module.
 */

$file = drupal_get_path('module', 'importer') . "/excel_reader2.inc";
  if (file_exists($file))
    include_once($file);

module_load_include('inc', 'importer', 'importer_common');

/**
 * Implementation of hook_perm().
 */
function importer_perm() {
  return array(
    'import data',
    'import delete',
    'upload data'
  );
}

/**
 * Implementation of hook_menu().
 */
function importer_menu() {
  $items[] = array();

  $items['admin/content/importer'] = array(
    'title' => 'Importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'importer_form'
    ),
    'access arguments' => array(
      'import data'
    ),
  );
  
  $items['importer'] = array(
    'title' => 'Importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'importer_form'
    ),    
    'access arguments' => array(
      'upload data'
    ),
  ); 

  $items['importer/js'] = array(
    'page callback' => 'importer_js',
    'access arguments' => array(
      'import data'
    ),
    'type' => MENU_CALLBACK,
    'file' => 'importer_batch_upload.inc'
  );

  $items['admin/content/importer/data_upload'] = array(
    'title' => 'Data upload form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'importer_form'
    ),
    'access arguments' => array(
      'import data'
    ),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -2,
  );

  $items['admin/content/importer/image_upload'] = array(
    'title' => 'Batch file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'importer_batch_file_uploade_form'
    ),
    'access arguments' => array(
      'upload data'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'importer_batch_upload.inc',    
    'weight' => -1,
  );
  
  $items['admin/content/importer/drop_table'] = array(
    'title' => 'Drop table or delete file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      '_importer_drop_table'
    ),
    'access arguments' => array(
      'import delete'
    ),
    'file' => 'importer_drop_table.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  $items['importer/data_upload'] = array(
    'title' => 'Data upload form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'importer_form'
    ),
    'access arguments' => array(
      'import data'
    ),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -2,
  );

  $items['importer/image_upload'] = array(
    'title' => 'Batch file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'importer_batch_file_uploade_form'
    ),
    'access arguments' => array(
      'upload data'
    ),
    'type' => MENU_LOCAL_TASK,
    'file' => 'importer_batch_upload.inc',    
    'weight' => -1,
  );
  
  $items['importer/drop_table'] = array(
    'title' => 'Drop table or delete file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      '_importer_drop_table'
    ),
    'access arguments' => array(
      'import delete'
    ),
    'file' => 'importer_drop_table.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );   
  
  $items['importer/preview/js'] = array(
    'page callback' => 'importer_preview_table_js',
    'access arguments' => array(
      'import data'
    ),
    'type' => MENU_CALLBACK,
    'file' => 'importer_common.inc'
  );  
  

  return $items;
}

/**
 * Returns FAPI arrays.
 *
 * @param $form_state
 */
function importer_form($form_state) {
  $file = drupal_get_path('module', 'importer') . "/excel_reader2.inc";
  if (!file_exists($file)) {
    $text = 'To enable the support for .xls files download the "excel_reader2.inc" file from';
    $text .= l(' here ', 'http://code.google.com/p/php-excel-reader/', array('attributes' => array('target' => '_blank')));
    $text .= 'and place in the module directory.';
    drupal_set_message($text, 'warning');
  }
  if (!empty ($form_state['storage']['step'])) {
    $function = $form_state['storage']['step'];
    return $function ($form_state);
  }
  else {
    return _importer_form_start($form_state);
  }
}

/**
 * Form validation controller.
 *
 * @param $form
 * @param $form_state
 */
function importer_form_validate($form, & $form_state) {
  if (!empty ($form_state['values']['step_validate'])) {
    $function = $form_state['values']['step_validate'];
    $function ($form, $form_state);
  }
  if ($form['this_step']['#value'] == '_importer_form_delims' && $form['#post']['op'] == 'Next') {
    $post_array = $form['#post'];
    foreach ($post_array as $key => $value) {
      if ($value == 'No data!!!') {
        form_set_error($key, t('The column @col in the file contains no data. Please check your file.', array('@col' => $key)));
      }
    }
  }
}

/**
 * Form submit controller.
 *
 * @param $form
 * @param $form_state
 */
function importer_form_submit($form, & $form_state) {
  if ($form_state['clicked_button']['#id'] == 'edit-generate-preview') {
    return;
  }
  if ($form_state['values']['submit'] == 'Delete') {
    //do something  
    $form_state['rebuild'] = TRUE;
    return;
  }
  if (empty ($form_state['storage'])) {
    $form_state['storage'] = array();
    $form_state['storage']['values'] = array();
  }
  // Call user-defined submit function.
  if (!empty ($form_state['values']['step_submit'])) {
    $function = $form_state['values']['step_submit'];
    $function ($form, $form_state);
  }
  // Store submitted form values, this must happen after function call above to allow for modifying $form_state['values'].
  $this_step = $form_state['values']['this_step'];
  $form_state['storage']['values'][$this_step] = $form_state['values'];

  // Set up next step.
  if ($form_state['clicked_button']['#id'] == 'edit-next') {
    if (!empty ($form_state['values']['step_next'])) {
      $form_state['storage']['step'] = $form_state['values']['step_next'];
    }
    else {
      drupal_set_message('Error');
    }
  }
  elseif ($form_state['clicked_button']['#id'] == 'edit-back') {
    if (!empty ($form_state['values']['step_back'])) {
      $form_state['storage']['step'] = $form_state['values']['step_back'];
      unset($form_state['storage']['values'][$form_state['values']['this_step']]);
    }
    else {
      drupal_set_message('Error');
    }
  }
  else {
    // Form complete
    $values = $form_state['storage']['values'];
    $sql_value = $form_state['values']['sql_query'];
    $tablename = $form_state['values']['tablename'];
    $schema = $form_state['values']['schema'];
    if (isset ($sql_value)) {
      if (db_table_exists($tablename)) {
        $prevexists = TRUE;
      }
      else {
        // Note that when using table prefixes, a prefix is prepended to the table name
        db_create_table($ret, $tablename, $schema);
        $prevexists = FALSE;
      }
      $errors = array(); $i =1; $j = 0;
      foreach ($sql_value as $sql) {
        if (!db_query($sql)) {
          $errors[] = t("Data on line @line in the file was not successfully inserted.", array('@line' => $i));
          $j++;
        }
        $i++;
      }
    }
    
    $errors_old = drupal_get_messages('error');
    if (isset($errors) && count ($errors) > 0)
        drupal_set_message(t('The total of @line lines from the file were not inserted in the @table table.', array('@line' => $j, '@table' => $tablename)), 'error');
    foreach ($errors as $error) {
        drupal_set_message($error, 'error');
    }
    if (!(isset($errors) && count ($errors) > 0)) {
      if (isset($form_state['values']['vidilist']) && !empty($form_state['values']['vidilist'])) {
        global $user;
        $table = new stdClass();
        $table->tablename = $tablename;
        $table->uid = $user->uid;
        $table->insert_time = date('Y-m-d H:i:s');
        drupal_write_record('vidi_visualization_tables', $table);        
      }
    }
    // Do something with $values.
    $form_state = NULL;
    if (module_exists('vidi') && isset($_GET['return_link'])) {
      $query = 'return_link=' . $_GET['return_link'];
      $query .= isset($_GET['datasource']) ? '&datasource=' . $_GET['datasource'] : '';
      drupal_goto('vidi/visualizations_links', $query);
    }
    $form['#redirect'] = $form_state['values']['step_submit'];
  }
}

/**
 * Starting step of multi step form.
 *
 * @param $form_state
 */
function _importer_form_start(& $form_state) {

  global $db_type, $db_prefix;
  drupal_add_js(drupal_get_path('module', 'importer') .'/js/importer.js');

  $sql = "";
  if ($db_type == 'mysql' || $db_type == 'mysqli') {
    $sql = "SHOW TABLES LIKE '" . $db_prefix . "import\_%'";
  }
  elseif ($db_type == 'pgsql') {
    $sql = "SELECT tablename FROM {pg_tables} WHERE tablename LIKE '" . $db_prefix . "import_%' ORDER BY tablename";
  }
  else {
    drupal_set_message(t('Unrecognized database type %dbtype', array(
      '%dbtype' => $db_type
    )));
    $render_tables = FALSE;
  }
  $result = db_query($sql);
  $tables = array();
  while ($row = db_fetch_array($result)) {
    foreach ($row as $tablename) {
      $unprefixed = schema_unprefix_table($tablename);
      $tables[$unprefixed] = $unprefixed;
    }
  }

  $filelist = importer_list_files();
  $form['#attributes'] = array(
    'enctype' => "multipart/form-data"
  );
  if (user_access('import data')) {
    $form['data_files'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose a file and operation type'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
  
    $operations = array(
      'IN' => 'Create new table',
      'IO' => 'Insert into existing table'
    );
    
    $form['data_files']['operation'] = array(
      '#title' => 'Desired operation',
      '#type' => 'select',
      '#required' => TRUE,
      '#default_value' => isset($form_state['storage']['values']['_importer_form_start']['operation']) ? $form_state['storage']['values']['_importer_form_start']['operation'] : $operations[key($operations)],
      '#options' => $operations,
    );
      
    $form['data_files']['table_list'] = array(
      '#title' => 'List of previously created tables',
      '#type' => 'select',
      '#description' => t('Required if "Insert into existing table" operation is selected.<br /> Not considered otherwise.'),
      '#default_value' => isset($form_state['storage']['values']['_importer_form_start']['table_list']) ? $form_state['storage']['values']['_importer_form_start']['table_list'] : $tables[key($tables)],
      '#options' => $tables,
    );
  
    $form['data_files']['filename'] = array(
      '#title' => 'Files',
      '#type' => 'radios',
      '#required' => FALSE,
      '#default_value' => isset($form_state['storage']['values']['_importer_form_start']['filename']) ? $form_state['storage']['values']['_importer_form_start']['filename'] : key($filelist),
      '#options' => $filelist,
    );  
  }
  
  $form['files'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upload file'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  
  $max_filesize = format_size(parse_size(file_upload_max_size()));
  $allowed = array('txt', 'csv');
  if (file_exists(drupal_get_path('module', 'importer') . "/excel_reader2.inc"))
    $allowed[] = 'xls';
  $form['files']['file_upload'] = array(
    '#type' => 'file',
    '#title' => 'File to upload',
    '#description' => t('Supported file types: @types<br/>Maximum allowed size @max_size', array('@types' => implode(', ', $allowed), '@max_size' => $max_filesize)),
    '#attributes' => array(
      'accept' => implode(',', array_filter($allowed)),
    ),    
  );

  $form['#attributes'] = array(
    'enctype' => "multipart/form-data"
  );

  $form['files']['file_upload_button'] = array(
    '#type' => 'submit',
    '#value' => t('Upload file'),
    '#submit' => array(
      'importer_file_uploader'
    )
  );

  if (user_access('import data')) {
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
  );

  $form['step_validate'] = array(
    '#type' => 'value',
    '#value' => '_importer_multistepform_form_start_validate',
  );

  $form['this_step'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_start',
  );

  $form['step_next'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_delims',
  );
}
  return $form;
}

/**
 * Validator of the multi step form starting step
 *
 * @param $form
 * @param $form_state
 */
function _importer_multistepform_form_start_validate($form, & $form_state) {
  if ($form_state['values']['filename'] == '' && $form_state['values']['op'] != 'Upload file') {
    form_set_error('start', t('You should have at least one file.'));
  }
  if ($form_state['values']['operation'] == "IO") {
    $filename = $form_state['values']['filename'];
    $file_exploded = explode('.', $filename);
    if ($file_exploded[1] == 'xls')
      $result = importer_find_columns_xls($filename);
    else
      $result = importer_find_columns($filename, importer_find_delimiter($filename));

    $table_columns = _importer_table_description($form_state);
    if ((count($table_columns)) != count($result['cnames']))
      form_set_error('start', t('Selected file and table are incopatible.<br />The table has ' . count($table_columns) . ' columns, and the file ' . count($result['cnames']) . ' columns.'));
  }
}

/**
 * Utility function - returns all the columns
 * from the db table forwarded in the $form_state
 * @param $form_state
 */
function _importer_table_description($form_state) {
  $column_names = array();
  $tablename = isset($form_state['values']['table_list']) ? $form_state['values']['table_list'] : $form_state['storage']['values']['_importer_form_start']['table_list'];
  $tablename = db_escape_table($tablename);
  if (db_table_exists($tablename)) {
    $results = db_query("show columns from {" . $tablename . "}");
    $i = 0;
    while ($result = db_fetch_object($results)) {
      if ($result->Key !== "PRI") {
        $column_names[$i]['name'] = $result->Field;
        $column_names[$i]['type'] = $result->Type;
        $i++;
      }
    }
  }
  return $column_names;
}

/**
 * Second step of the multi step form.
 *
 * @param $form_state
 */
function _importer_form_delims(& $form_state) {
  unset($rezultat);
  $sel_file_name = $form_state['storage']['values']['_importer_form_start']['filename'];

  $form['name'] = array(
    '#type' => 'value',
    '#value' => $form_state['storage']['values']['_importer_form_start']['filename'],
  );

  $form['name1'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'readonly' => 'readonly'
    ),
    '#title' => 'File name',
    '#value' => $form_state['storage']['values']['_importer_form_start']['filename'],
  );

  $file_name_parts = explode('.', $sel_file_name);
  $file_extension = $file_name_parts[count($file_name_parts) - 1];

  if ($file_extension != 'xls' && $file_extension != 'xlsx') {
    $delimiter = importer_find_delimiter($sel_file_name);
    $form['delimiters'] = array(
      '#title' => 'Delimiter',
      '#type' => 'select',
      '#required' => TRUE,
      '#default_value' => isset($form_state['storage']['values']['_importer_form_delims']) ? $form_state['storage']['values']['_importer_form_delims']['delimiters'] : $delimiter,
      '#options' => array(
        'tab' => 'Tab',
        'space' => 'Space ( )',
        'comma' => 'Comma (,)',
        'semicolon' => 'Semicolon (;)',
        'colon' => 'Colon (:)',
        'pipe' => 'Pipe (|)',
      )
    );
    $rezultat = importer_find_columns($sel_file_name, $delimiter);
  }
  else {
    if ($file_extension == 'xlsx') {
      $form['extenzija'] = array(
        '#type' => 'item',
        '#value' => 'Excel 2007 file format isn\'t supported'
      );
      $rezultat = array();
    }
    else {
      $rezultat = importer_find_columns_xls($sel_file_name);
    }
  }

  $form['variabletable'] = array(
    '#type' => 'item',
    '#theme' => 'importer_delims_table'
  );

  $form['variable_old_table'] = array(
    '#type' => 'item',
    '#theme' => 'importer_delims_table_old'
  );
  if ($form_state['storage']['values']['_importer_form_start']['operation'] == 'IO')
    $column_names = _importer_table_description($form_state);

  $options_int = array(
    'int' => 'Integer'
  );
  $options_float = array(
    'float' => 'Float',
    'floatUS' => 'Float (xxx,xxx.xx)',
    'floatEU' => 'Float (xxx.xxx,xx)'
  );
  $options_date = array(
    'date' => 'Date',
    'date1' => 'Date yyyy-mm-dd',
    'date2' => 'Date dd-mm-yyyy',
    'date21' => 'Date mm-dd-yyyy',
    'date3' => 'Date yyyy/mm/dd',
    'date4' => 'Date dd/mm/yyyy',
    'date41' => 'Date mm/dd/yyyy',
    'date5' => 'Date yyyy.mm.dd',
    'date6' => 'Date dd.mm.yyyy',
    'date61' => 'Date mm.dd.yyyy',
    'datetime1' => 'Date and Time yyyy-mm-dd hh:mm',
    'datetime2' => 'Date and Time dd-mm-yyyy hh:mm',
    'datetime21' => 'Date and Time mm-dd-yyyy hh:mm',
    'datetime3' => 'Date and Time yyyy/mm/dd hh:mm',
    'datetime4' => 'Date and Time dd/mm/yyyy hh:mm',
    'datetime41' => 'Date and Time mm/dd/yyyy hh:mm',
    'datetime5' => 'Date and Time yyyy.mm.dd hh:mm',
    'datetime6' => 'Date and Time dd.mm.yyyy hh:mm',
    'datetime61' => 'Date and Time mm.dd.yyyy hh:mm',
    'datetime' => 'Date and Time'
  );
  $options_text = array(
    'text' => 'Text'
  );

  if ($form_state['storage']['values']['_importer_form_start']['operation'] == "IN") {
    for ($i = 0; $i < count($rezultat['cnames']); $i++) {
      if ($rezultat['type'][$i] != 'empty') {
        $form['variabletable']['colnames_' . $i] = array(
          '#type' => 'textfield',
          '#default_value' => isset($form_state['storage']['values']['_importer_form_delims']['colnames_' . $i]) ? $form_state['storage']['values']['_importer_form_delims']['colnames_' . $i] : $rezultat['cnames'][$i],
          '#size' => 20,
          '#required' => TRUE
        );
        $form['variabletable']['datatypes_' . $i] = array(
          '#type' => 'select',
          '#required' => 1,
          '#default_value' => $rezultat['type'][$i],
          '#options' => array_merge($options_int, $options_float, $options_date, $options_text)
        );
      }
      else{
        $form['variabletable']['colnames_' . $i] = array(
          '#type' => 'textfield',
          '#default_value' => isset($form_state['storage']['values']['_importer_form_delims']['colnames_' . $i]) ? $form_state['storage']['values']['_importer_form_delims']['colnames_' . $i] : $rezultat['cnames'][$i],
          '#size' => 20,
          '#attributes' => array(
            'readonly' => 'readonly'
          ),          
          '#required' => TRUE
          
        );
        $form['variabletable']['datatypes_' . $i] = array(
          '#type' => 'textfield',
          '#size' => 20,
          '#attributes' => array(
            'readonly' => 'readonly'
          ),      
          '#default_value' => 'No data!!!'
        );        
      }
    }
  }
  elseif ($form_state['storage']['values']['_importer_form_start']['operation'] == "IO") {
    $columns = array();
    for ($i = 0; $i < count($column_names); $i++)
      $columns[$column_names[$i]['name']] = ($i +1) . '. ' . $column_names[$i]['name'] . ' (' . $column_names[$i]['type'] . ')';
    for ($i = 0; $i < count($column_names); $i++) {
      if ($rezultat['type'][$i] != 'empty') {
        $form['variable_old_table']['datatypes_' . $i] = array(
          '#type' => 'select',
          '#required' => 1,
          '#default_value' => $rezultat['type'][$i],
          '#options' => array_merge($options_int, $options_float, $options_date, $options_text)
        );
      }
      else{
         $form['variable_old_table']['datatypes_' . $i] = array(
          '#type' => 'textfield',
          '#size' => 20,
          '#attributes' => array(
            'readonly' => 'readonly'
          ),      
          '#default_value' => 'No data!!!'
        );       
      }
      
      $form['variable_old_table']['file_column_' . $i] = array(
        '#type' => 'textfield',
        '#attributes' => array(
          'readonly' => 'readonly'
        ),
        '#required' => 1,
        '#value' => $rezultat['cnames'][$i],
        '#size' => 30
      );

      $form['variable_old_table']['tablestruct_' . $i] = array(
        '#type' => 'select',
        '#default_value' => isset($form_state['storage']['values']['_importer_form_delims']['tablestruct_' . $i]) ? $form_state['storage']['values']['_importer_form_delims']['tablestruct_' . $i] : $column_names[$i]['name'],
        '#options' => $columns,
        
      );
    }
  }
  if ($form_state['storage']['values']['_importer_form_start']['operation'] == "IN") {
    $tablename = drupal_strtolower(preg_replace('/[^a-z0-9]/i', '_', $file_name_parts[0]));
    $tablename = drupal_substr($tablename, 0, 20);

    $form['tablename'] = array(
      '#type' => 'textfield',
      '#title' => t('Table name'),
      '#default_value' => $form_state['storage']['values']['_importer_form_delims']['tablename'] ? $form_state['storage']['values']['_importer_form_delims']['tablename'] : $tablename,
      '#size' => 21,
      '#maxlength' => 21,
      '#required' => TRUE,

      
    );
  }
  elseif ($form_state['storage']['values']['_importer_form_start']['operation'] == "IO") {
    $tablename = substr($form_state['storage']['values']['_importer_form_start']['table_list'], 7);
    $form['tablename'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'readonly' => 'readonly'
      ),
      '#title' => t('Table name'),
      '#default_value' => $form_state['storage']['values']['_importer_form_delims']['tablename'] ? $form_state['storage']['values']['_importer_form_delims']['tablename'] : $tablename,
      '#size' => 21,
      '#maxlength' => 21,
      '#required' => TRUE,
      
    );
  }
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => 'Back',

    
  );

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next',

    
  );

  $form['this_step'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_delims',

    
  );

  $form['step_back'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_start',

    
  );

  $form['step_next'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_finish',

    
  );
  return $form;
}

/**
 * Theme function that handles rendering
 * of the table in the second step of multi step form
 * in case of new table creation  
 *
 * @param <type> $form
 */
function theme_importer_delims_table($form) {
  if (!isset ($form['colnames_0']))
    return;
  $header = array(
    t('Data name'),
    t('Data type')
  );
  $rows = array();
  $i = 0;
  foreach (element_children($form) as $child) {
    if (!isset($form['colnames_' . $i]))
      break;
    //$render_column = isset($form['colnames_' . $i]) ? $form['colnames_' . $i] : $form['colnames_old' . $i];
    //$render_type = isset($form['datatypes_' . $i]) ? $form['datatypes_' . $i] : $form['datatypes_old' . $i];
    $rows[] = array(
      drupal_render($form['colnames_' . $i]),
      drupal_render($form['datatypes_' . $i]),
    );
    $i++;
  }
  unset($form[$child]);
  return theme('table', $header, $rows) . drupal_render($form);
}

/**
 * Theme function that handles rendering
 * of the table in the second step of multi step form
 * in case of inserting data to existing table
 * @param <type> $form
 */
function theme_importer_delims_table_old($form) {
  if (!isset($form['tablestruct_0']))
    return;
  $header = array(
    t('Table field name (type)'),
    t('File column to map'),
    t('Data type of file field'),
  );
  $rows = array();
  $i = 0;
  foreach (element_children($form) as $child) {
    if (!isset($form['tablestruct_' . $i]))
      break;
    $rows[] = array(
      drupal_render($form['tablestruct_' . $i]),
      drupal_render($form['file_column_' . $i]),
      drupal_render($form['datatypes_' . $i]),
      
    );
    $i++;
  }
  unset($form[$child]);
  return theme('table', $header, $rows) . drupal_render($form);
}

/**
 * Final step of the multi step form (confirmation).
 *
 * @param $form_state
 */
function _importer_form_finish($form_state) {
  $colnames = array();
  $colnames1 = array();
  $coltypes = array();
  $filename = $form_state['values']['name'];
  if ($form_state['storage']['values']['_importer_form_start']['operation'] == 'IN') {
    foreach ($form_state['values'] as $key => $element) {
      if ($key === 'delimiters')
        $delimiter = $element;
      if (strpos($key, 'olnames')) {
        $colnames[] = preg_replace('/[^a-z0-9]/i', '', $element);
        $colnames1[]= "`" . (preg_replace('/[^a-z0-9]/i', '', $element)) . "`";
      }
      if (strpos($key, 'atatypes'))
        $coltypes[] = $element;
    }
  }
  elseif ($form_state['storage']['values']['_importer_form_start']['operation'] == 'IO') {
    foreach ($form_state['values'] as $key => $element) {
      if ($key === 'delimiters')
        $delimiter = $element;
      if (strpos($key, 'ablestruct')) {
        $colnames[] = preg_replace('/[^a-z0-9]/i', '', $element);
        $colnames1[]= "`" . (preg_replace('/[^a-z0-9]/i', '', $element)) . "`";
      }
      if (strpos($key, 'atatypes'))
        $coltypes[] = $element;
    }
  }
  if ($form_state['storage']['values']['_importer_form_start']['operation'] == 'IN') {
    //============== generate schema ===============================================
    $schema = array(
      'description' => t($filename),

      
    );
    //== PK ====
    $schema['fields']['ImporterID'] = array(
      'type' => 'serial',
      'unsigned' => TRUE,
      'not null' => TRUE
    );
    $schema['primary key'] = array(
      'ImporterID'
    );
    for ($i = 0; $i < count($colnames); $i++) {
      $schematype = 'int';
      if (strpos($coltypes[$i], 'loat'))
        $schematype = 'float';
      if (strpos($coltypes[$i], 'ate'))
        $schematype = 'datetime';
      if (strpos($coltypes[$i], 'ext'))
        $schematype = 'text';

      $schema['fields'][$colnames[$i]] = array(
        'type' => $schematype,
        'not null' => FALSE
      );
    }
  }
  else {
    $schema = drupal_get_schema($table = $form_state['storage']['values']['_importer_form_start']['table_lisr']);
  }
  $file_name_parts = explode('.', $filename);
  $file_extension = $file_name_parts[count($file_name_parts) - 1];

  $tablename = $form_state['values']['tablename'];
  $tablename = drupal_strtolower(preg_replace('/[^a-z0-9]/i', '_', $tablename));
  $tablename = drupal_substr($tablename, 0, 63);

  $tablename = "import_" . $tablename;

  if ($file_extension != 'xls' && $file_extension != 'xlsx') {
    $rezultat = importer_find_columns($filename, $delimiter);
  }
  elseif ($file_extension == 'xlsx') {
    $rezultat = array();
  }
  else {
    $rezultat = importer_find_columns_xls($filename);
  }
  //============== prepare data ==================================================
  $NoOfCols = count($colnames);
  $NoOfRows = count($rezultat['data']);

  //Nikola
  $form['sql_commands'] = array(
    '#type' => 'fieldset',
    '#title' => t('SQL commands to be executed'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['sql_commands']['message'] = array(
    '#value' => t('Your data is ready to be imported in the database.')
  );
  $dots = FALSE;

  $sql_query = _importer_generate_sql($NoOfRows, $NoOfCols, $coltypes, $rezultat, $tablename, $colnames1);
  //==============================================================================

  $form['this_step'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_finish',
  );

  $form['sql_query'] = array(
    '#type' => 'value',
    '#value' => $sql_query,
  );

  $form['schema'] = array(
    '#type' => 'value',
    '#value' => $schema,
  );

  $form['tablename'] = array(
    '#type' => 'value',
    '#value' => $tablename,
  );
  
  if (module_exists('vidi')) {
    $form['vidilist'] = array(
      '#type' => 'checkbox',
      '#title' => t('Make this table available to VIDI module.'),
    );    
  }

  $form['step_submit'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_start',
  );

  $form['step_back'] = array(
    '#type' => 'value',
    '#value' => '_importer_form_delims',
  );

  $form['back'] = array(
    '#type' => 'submit',
    '#value' => 'Back',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Finish',
  );

  return $form;
}

function _importer_form_my_submit($form, & $form_state) {
  if ($form_state['values']['like_music'] == '0') {
    $form_state['values']['step_next'] = '_importer_form_final';
  }
}

/**
 * implementation of hook_theme()
 * 
 * @param &$existing
 * @param $type
 * @param $theme
 * @param $path
 */
function importer_theme(&$existing, $type, $theme, $path) {
  $hooks['importer_delims_table'] = array(
    'arguments' => array(
      'form' => NULL
    )
  );
  $hooks['importer_delims_table_old'] = array(
    'arguments' => array(
      'form' => NULL
    )
  );
  return $hooks;
}
